import 'dart:io';

import 'package:entity_serializer/src/writer/entity_writer.dart';
import 'package:entity_serializer/src/writer/serializer_writer.dart';
import 'package:path/path.dart';
import 'package:recase/recase.dart';

import '../model/entity.dart';
import '../model/serializer.dart';
import 'model_generator.dart';

class OutputGenerator {
  final bool splitByFiles;
  final String? outputPath;
  final ModelGenerator models;

  OutputGenerator({required this.splitByFiles, required this.outputPath, required this.models});

  void generateOutput() {
    if (splitByFiles) {
      _generateSeparateFiles();

    } else {
      _generateSingleFile();
    }
  }

  void _generateSeparateFiles() {
    final sb = StringBuffer();
    for (final ent in models.entities) {
      sb.clear();
      _writeAutoGenHeaderInfo(sb);
      EntityWriter writer = EntityWriter(ent);
      writer.writeExternalImports(sb);
      writer.writeModelImports(sb, _createEntityImportPath);
      writer.writeAutoGenImports(sb, _createEntityImportPath);
      writer.writeBody(sb);
      _writeToOutput(buffer: sb, entity: ent);
    }
    for (final s in models.serializers) {
      sb.clear();
      _writeAutoGenHeaderInfo(sb);
      SerializerWriter writer = SerializerWriter(s, models.entities);
      writer.writeImports(sb, _createEntityImportPath);
      writer.writeBody(sb);
      _writeToOutput(buffer: sb, serializer: s);
    }
  }

  void _generateSingleFile() {
    final sb = StringBuffer();
    final Set<String> imports = {};
    bool needAutoGenImport = false;
    for (final ent in models.entities) {
      final writer = EntityWriter(ent);
      writer.collectExternalImports(imports);
      writer.writeBody(sb);
      needAutoGenImport |= ent.copyWith;
    }
    for (final s in models.serializers) {
      final writer = SerializerWriter(s, models.entities);
      writer.writeBody(sb);
      s.collectImports(imports);
    }
    //put imports in front of rest
    StringBuffer out = StringBuffer();
    _writeAutoGenHeaderInfo(out);
    for (final import in imports) {
      out.writeln(import);
    }
    out.writeln();
    if (needAutoGenImport) {
      final path = basename(_createSingleFilePath()).replaceFirst(".dart", ".g.dart");
      out.writeln("part '$path';");
      out.writeln();
    }
    out.write(sb.toString());
    _writeToOutput(buffer: out);
  }

  void _writeToOutput({required StringBuffer buffer, Entity? entity, Serializer? serializer}) {
    if (outputPath != null) {
      late String path;
      if (entity != null) {
        path = _createEntityFilePath(entity.name);
      } else if (serializer != null) {
        path = _createSerializerFilePath(serializer.name);
      } else {
        //path should point to -o cli argument, for this situation this must be .dart file
        path = _createSingleFilePath();
      }
      File(path).writeAsStringSync(buffer.toString());
    } else {
      print(buffer.toString());
    }
  }

  void _writeAutoGenHeaderInfo(StringBuffer sb) {
    sb.writeln("// This file is autogenerated, do not modify.");
    sb.writeln("// Generator: entity_serializer by TheTosters");
    sb.writeln("// Generation date: ${DateTime.now().toIso8601String()}");
    sb.writeln();
  }

  String _createSingleFilePath() =>
      outputPath!.endsWith(".dart") ? outputPath! : ("${outputPath!}.dart");

  String _createSerializerFilePath(String name) {
    final dir = _findOutputDir();
    return join(dir, "serializer_${name.snakeCase}.dart");
  }

  String _findOutputDir() {
    late final String dir;
    if (outputPath == null) {
      dir = "";
    } else {
      if (outputPath!.endsWith("/")) {
        dir = dirname(outputPath!);
      } else {
        dir = "${outputPath!}/";
      }
    }
    return dir;
  }

  String _createEntityImportPath(String name) {
    return "${name.snakeCase}.dart";
  }

  String _createEntityFilePath(String name) {
    final dir = _findOutputDir();
    return join(dir, "${name.snakeCase}.dart");
  }

}
